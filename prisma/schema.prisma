// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id
  username     String  @unique
  displayName  String
  email        String? @unique
  passwordHash String?
  googleId     String? @unique
  avatarUrl    String?
  bio          String?

  sessions   Session[]
  wallpapers Wallpaper[]
  favorites  Favorite[]

  createdAt DateTime @default(now())

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Wallpaper {
  id          String  @id @default(cuid())
  title       String
  description String?
  category    String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  image     Image?
  favorites Favorite[]

  createdAt DateTime @default(now())

  @@map("wallpapers")
}

model Image {
  id          String     @id @default(cuid())
  imageUrl    String
  wallpaperId String?    @unique
  wallpaper   Wallpaper? @relation(fields: [wallpaperId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@map("image")
}

model Favorite {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallpaperId String
  wallpaper   Wallpaper @relation(fields: [wallpaperId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, wallpaperId])
  @@map("favorites")
}
